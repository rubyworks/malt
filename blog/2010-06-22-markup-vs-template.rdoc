= 2010-06-22 | Markup vs. Template

One of the things that I wanted to address with Malt that Tilt
essentially glosses over is the distinction between Markup and
Template systems. Markup languages define a set of format
transformations. Usually there is only one output format, HTML,
but there can be other output formats, such as PDF. 
Unlike markup, template engines do not handle format conversions
but rather define a "meta-syntax" for injecting an extral data
source into a document.

Because of these distinctions the two have different interfaces.
For example markups can have multiple output format methods.

  Malt::Markup.file('foo.rdoc').to_html
  Malt::Markup.file('foo.rdoc').to_pdf

While templates have only the ability to be compiled and then
rendered as a string.

  Malt::Template.file('foo.erb').compile(db).to_s

So how do we merge these two interfaces to provide a single 
Malt interface for both type of document that make sense? Well
lets take the two possiblities and consider each in turn.

For markup, if we encountered:

  Malt.file('foo.erb').to_html

Obviously things are a miss. Niether has the template been
rendered nor is HTML the necessary output format.

On the other side of the coin if we encountered:

  Malt.file('foo.rdoc').compile(db).to_s

Compilation would be meaningless and what format does #to_s
mean --whould it simply be the original document?

Should we try to reconcile these diferences in someway? Can
we allow #compile simply to pass thru the rdoc document?
Can #to_s be mapped to #to_html becuase that is by far and
away the most common case?

Or perhaps the better approach is to accept they are different
and simply provide an ability to test for it?

  mdoc = Malt.file(fname)
  if mdoc.markup?
    mdoc.to_html
  else
    mdoc.compile(db)
  end

Considering how people might use the library, the best approach
might be a compromise between the two. We allow compile(db),
or perhaps a variant soft_compile(db), to pass thru markup, but
to the end result can not render via  #to_html or the like than
an error is raised.





