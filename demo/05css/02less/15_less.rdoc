== LESS

Lets say we have a LESS document called 'test.less' containing:

  @brand_color: #4D926F;
  #header {
    color: @brand_color;
  }
  h2 {
    color: @brand_color;
  }

We can render it via Malt with #render.

  @css = Malt.render(:file=>'test.less')

And we can verify that @css is:

  #header {
    color: #4d926f;
  }
  h2 {
    color: #4d926f;
  }

Look how concise that is. LESS is pretty slick.

We can also get a hold of the LESS document via the Malt.file function.

  less = Malt.file('test.less')

  less.class.assert == Malt::Format::LESS

We can convert the LESS document to a CSS document via the #to_css method.

  css = less.to_css

We can see that the output is an instance of Malt::Format::HTML.

  css.class.assert == Malt::Format::CSS

And that by calling #to_s we can get the rendered CSS document.

  css.to_s.assert.include?("#header {\n  color: #4d926f;")
  css.to_s.assert.include?("h2 {\n  color: #4d926f;")

Or we can convert the LESS document directly to CSS via the #css method.

  out = less.css

  out.assert.include?("#header {\n  color: #4d926f;")
  out.assert.include?("h2 {\n  color: #4d926f;")

Less supports a compression option. We can modify this option on the fly
via the `#with` method.

  less = Malt.file('test.less')

  less.class.assert == Malt::Format::LESS

  out = less.with(:compress=>true).css

  out.assert.include?('#header{color:#4d926f;}')
  out.assert.include?('h2{color:#4d926f;}')

