== Ruby

It may not seem obvious at first, but Ruby itself can be used as
a template system.

Lets say we have a Ruby document called 'test.rb' containing:

  "<h1>Example #{ title }</h1>\n" +
  "<p>This is an example of Ruby rendering.</p>"

We can run this Ruby script thru Malt's +render+ function.

  data = {:title => 'Document'}

  html = Malt.render(:file=>'test.rb', :data=>data)

Whatever was the final result of evaluating the Ruby script, converted to
a string via #to_s, will be the result of the rendering.

  html.assert.include?('<h1>Example Document</h1>')

We can get a hold of the Ruby template via the Malt.file function.

  ruby = Malt.file('test.rb')

  ruby.class.assert == Malt::Format::Ruby

Ruby is a Universal Template Format, so it can be converted to any other
format (even if it is not really that format).

  data = {:title => "Document"}

  html = ruby.to_html(data)

First we will notice that the output is an instance of Malt::Format::HTML.

  html.class.assert == Malt::Format::HTML

And that by calling #to_s we can get the rendered HTML document.

  html.to_s.assert.include?('<h1>Example Document</h1>')

Or we can convert the Ruby document directly to HTML via the #html method.

  out = ruby.html(data)

  out.assert.include?('<h1>Example Document</h1>')

